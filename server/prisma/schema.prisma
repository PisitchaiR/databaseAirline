// This is your Prisma schema file, // learn more about it in the docs: https://pris.ly/d/prisma-schema 
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//user
model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  role     Role   @default(customer)

  airline       Airline? //airline of user
  CollectCoupon CollectCoupon[]
  Reservation   Reservation[]
}

enum Role {
  customer
  personnel
}

model CollectCoupon {
  id          String       @id @default(cuid())
  userId      String
  couponId    String
  User        User         @relation(fields: [userId], references: [id])
  Coupon      Coupon       @relation(fields: [couponId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  Reservation Reservation?

  @@map("Collect_Coupon")
}

model Coupon {
  id            String          @id @default(cuid())
  name          String          @unique
  discount      Int
  expiredAt     DateTime        @map("expired_at")
  CollectCoupon CollectCoupon[] //รายการคูปองที่เก็บไว้
}

model Reservation {
  id         String  @id @default(cuid())
  userId     String
  flightId   String
  seat       Int
  couponId   String? @unique
  totalPrice Float   @map("total_price")

  User   User           @relation(fields: [userId], references: [id])
  Flight Flight         @relation(fields: [flightId], references: [id])
  Coupon CollectCoupon? @relation(fields: [couponId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Reservation")
}

model Flight {
  id              String        @id @default(cuid())
  flightNo        String        @unique
  departDate      DateTime      @map("depart_date") //วันที่ออกเดินทาง
  arriveDate      DateTime      @map("arrive_date") //วันที่ถึง
  departAirportId String //สนามบินต้นทาง 
  arriveAirportId String //สนามบินปลายทาง
  price           Float
  seat            Int
  planeId         String
  Plane           Plane         @relation(fields: [planeId], references: [id])
  ArriveAirport   Airport       @relation("FlightTo", fields: [arriveAirportId], references: [id])
  DepartAirport   Airport       @relation("FlightFrom", fields: [departAirportId], references: [id])
  Reservation     Reservation[]
}

model Airline {
  id               String             @id @default(cuid())
  ownerId          String             @unique
  nameTh           String             @unique
  nameEn           String             @unique
  phone            String             @unique
  User             User?              @relation(fields: [ownerId], references: [id])
  Plane            Plane[] //รายการเครื่องบิน
  AirlineInAirport AirlineInAirport[] //รายการสนามบิน
}

model Plane {
  id        String   @id @default(cuid())
  name      String   @unique
  seat      Int
  airlineId String?
  Airline   Airline? @relation(fields: [airlineId], references: [id])
  Flight    Flight[]
}

model AirlineInAirport {
  id        String   @id @default(cuid())
  airlineId String
  airportId String
  Airline   Airline  @relation(fields: [airlineId], references: [id])
  Airport   Airport  @relation(fields: [airportId], references: [id])
  createdAt DateTime @default(now())

  @@map("Airline_In_Airport")
}

model Airport {
  id               String             @id @default(cuid())
  nameTh           String             @unique @map("name_th")
  nameEn           String             @unique @map("name_eg")
  countriesId      String
  Country          Countries          @relation(fields: [countriesId], references: [code])
  AirlineInAirport AirlineInAirport[]
  FlightArrive     Flight[]           @relation("FlightFrom")
  FlightDepart     Flight[]           @relation("FlightTo")
}

model Countries {
  code      String    @id
  nameTh    String    @unique @map("name_th")
  nameEn    String    @unique @map("name_en")
  Airport   Airport[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
